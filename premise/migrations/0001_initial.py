# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2022-04-11 14:04
from __future__ import unicode_literals

import address.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import phonenumber_field.modelfields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('auth', '0008_alter_user_username_max_length'),
        ('address', '0002_auto_20160213_1726'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_profile', models.BooleanField(default=False)),
                ('is_finder', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(editable=False)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('image', imagekit.models.fields.ProcessedImageField(upload_to='images')),
            ],
            options={
                'ordering': ('-date_added',),
            },
        ),
        migrations.CreateModel(
            name='Liked',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(editable=False)),
                ('finder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties_liked', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('message', models.TextField()),
                ('slug', models.SlugField()),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=50)),
                ('number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('picture', imagekit.models.fields.ProcessedImageField(blank=True, upload_to='agents')),
                ('logo', imagekit.models.fields.ProcessedImageField(blank=True, upload_to='agents-logos')),
                ('description', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('price', models.PositiveIntegerField()),
                ('bedrooms', models.PositiveIntegerField()),
                ('bathrooms', models.PositiveIntegerField(default=1)),
                ('amenities', models.TextField()),
                ('availability', models.CharField(choices=[('yes', 'YES'), ('no', 'NO')], default='yes', max_length=20)),
                ('purpose', models.CharField(choices=[('buy', 'BUY'), ('rent', 'RENT'), ('short stay', 'SHORT STAY')], default='rent', max_length=50)),
                ('furnishing', models.CharField(choices=[('yes', 'YES'), ('no', 'NO')], default='no', max_length=50)),
                ('special_offer', models.CharField(choices=[('yes', 'YES'), ('no', 'NO')], default='no', max_length=50)),
                ('key_features', models.TextField()),
                ('details', models.TextField()),
                ('picture', imagekit.models.fields.ProcessedImageField(upload_to='properties')),
                ('type', models.CharField(choices=[('flat', 'FLAT'), ('townhouse', 'TOWNHOUSE'), ('farm', 'FARM'), ('condo', 'CONDO'), ('commercial', 'COMMERCIAL'), ('detach', 'DETACH'), ('semi-detach', 'SEMI-DETACH')], default='flat', max_length=50)),
                ('size', models.PositiveIntegerField()),
                ('sponsored', models.BooleanField(default=False)),
                ('created', models.DateField(auto_now_add=True)),
                ('slug', models.SlugField()),
                ('address', address.models.AddressField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='address', to='address.Address')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_related', to=settings.AUTH_USER_MODEL)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counties', to='premise.County')),
                ('finders', models.ManyToManyField(blank=True, related_name='property_saved', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('flat', 'FLAT'), ('townhouse', 'TOWNHOUSE'), ('farm', 'FARM'), ('condo', 'CONDO'), ('commercial', 'COMMERCIAL')], default='flat', max_length=60)),
                ('picture', imagekit.models.fields.ProcessedImageField(blank=True, upload_to='writers')),
            ],
        ),
        migrations.AddField(
            model_name='message',
            name='premise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='premise.Property'),
        ),
        migrations.AddField(
            model_name='liked',
            name='premise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='premise.Property'),
        ),
        migrations.AddField(
            model_name='image',
            name='property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='premise.Property'),
        ),
        migrations.AddField(
            model_name='bookmark',
            name='property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='premise.Property'),
        ),
        migrations.AddField(
            model_name='bookmark',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties_bookmarked', to=settings.AUTH_USER_MODEL),
        ),
    ]
